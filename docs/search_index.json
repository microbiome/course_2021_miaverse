[["index.html", "Introduction to microbiome data science 1 Overview 1.1 The miaverse framework 1.2 Learning goals 1.3 Acknowledgments", " Introduction to microbiome data science Leo Lahti, Tuomas Borman, and Henrik Eckermann 2021-07-07 1 Overview Welcome to Radboud Summer School, July 2021 Figure source: Moreno-Indias et al. (2021) Statistical and Machine Learning Techniques in Human Microbiome Studies: Contemporary Challenges and Solutions. Frontiers in Microbiology 12:11. 1.1 The miaverse framework The miaverse (mia = MIcrobiome Analysis) is an R/Bioconductor framework for microbiome data science. It aims to extend the capabilities of another popular framework, phyloseq. The miaverse framework consists of an efficient data structure, an associated package ecosystem, demonstration data sets, and open documentation. These are explained in more detail in the online book Orchestrating Microbiome Analysis. This training material walks you through an example workflow that shows the standard steps of taxonomic data analysis covering data access, exploration, analysis, visualization and reporoducible reporting. You can run the workflow by simply copy-pasting the examples. For advanced material, you can test and modify further examples from the OMA book, or try to apply the techniques to your own data. 1.2 Learning goals This course provides an overview of the standard bioinformatics workflow in taxonomic profiling studies, ranging from data preprocessing to statistical analysis and reproducible reporting, with a focus on examples from human gut microbiota studies. You will become familiar with standard bioinformatics concepts and methods in taxonomic profiling studies of the human microbiome. This includes better understanding of the specific statistical challenges, practical hands-on experience with the commonly used methods, and reproducible research with R. After the course you will know how to approach new tasks in microbiome data science by utilizing available documentation and R tools. Target audience Advanced students and applied researchers who wish to develop their skills in microbial community analysis. Venue Radboud University / Online, Nijmegen. July 5-16, 2021, with contributions by University of Turku, Finland. 1.3 Acknowledgments Citation “Introduction to miaverse (2021). Tuomas Borman, Felix Ernst, Sudarshan Shetty, Henrik Eckermann, Leo Lahti. URL: https://microbiome.github.io”. Contact Leo Lahti, University of Turku miaverse collective License All material is released under the open CC BY-NC-SA 3.0 License. Source code The source code of this repository is fully reproducible and contains the Rmd files with executable code. All files can be rendered at one go by running the file main.R. You can check the file for details on how to clone the repository and convert it into a gitbook, although this is not necessary for the training. Source code (github): miaverse teaching material Course page (html): miaverse teaching material "],["program.html", "2 Program 2.1 Monday 12 July: from raw sequences to ecological data analysis 2.2 Tuesday 13 July - Alpha diversity 2.3 Wednesday 14 July - Beta diversity 2.4 Thursday 15 July - Differential abundance 2.5 Friday 16 July: Presentations &amp; closing", " 2 Program The course takes place on each working day from 9am – 1pm (CEST). Short breaks will be scheduled between sessions. 2.1 Monday 12 July: from raw sequences to ecological data analysis Lectures Microbiota analysis: association studies vs. causality; microbiota sequencing methods (16S, shotgun, metagenomics) - by dr. Tom Ederveen (Radboud UMC Nijmegen, The Netherlands) DNA isolation and 16S rRNA gene sequencing; bioinformatics step 1: from raw sequences to OTU table in a biom file – by Tom Ederveen (Radboudumc Nijmegen, The Netherlands) Demonstration &amp; Practical Importing the data to R environment for interactive data analysis – by prof. dr. Leo Lahti (University of Turku, Finland) 2.2 Tuesday 13 July - Alpha diversity Lecture Key concepts in microbiome data science Practical Alpha diversity: estimation, analysis, and visualization 2.3 Wednesday 14 July - Beta diversity Demonstration Community similarity Practical Beta diversity: estimation, analysis, and visualization 2.4 Thursday 15 July - Differential abundance Lecture Differential abundance analysis methods Practical Differential abundance in practice Lecture Overview of microbiota data science methods &amp; concepts 2.5 Friday 16 July: Presentations &amp; closing Student presentations on microbiome data analytics "],["getting-started.html", "3 Getting started 3.1 Checklist (before the course) 3.2 Support and resources 3.3 Installing and loading the required R packages", " 3 Getting started 3.1 Checklist (before the course) Install the following software in advance in order to avoid unnecessary delays and leaving more time for the course contents. R (version &gt;4.1.0) RStudio; choose “Rstudio Desktop” to download the latest version. Optional but preferred. For further details, check the Rstudio home page. Install and load the required R packages. After a successful installation you can start with the case study examples in this training material 3.2 Support and resources For additional reading and online material, see Material section For online support on installation and other matters, you can join us at: Users: miaverse Gitter channel Developers: Bioconductor Slack #microbiomeexperiment channel (ask for an invitation) 3.3 Installing and loading the required R packages This section shows how to install and load all required packages into the R session. Only uninstalled packages are installed. # List of packages that we need from cran and bioc cran_pkg &lt;- c(&quot;BiocManager&quot;, &quot;bookdown&quot;, &quot;dplyr&quot;, &quot;ecodist&quot;, &quot;ggplot2&quot;, &quot;gridExtra&quot;, &quot;knitr&quot;, &quot;vegan&quot;) bioc_pkg &lt;- c(&quot;ANCOMBC&quot;, &quot;ape&quot;, &quot;DESeq2&quot;, &quot;DirichletMultinomial&quot;, &quot;mia&quot;, &quot;miaViz&quot;) # Gets those packages that are already installed cran_pkg_already_installed &lt;- cran_pkg[ cran_pkg %in% installed.packages() ] bioc_pkg_already_installed &lt;- bioc_pkg[ bioc_pkg %in% installed.packages() ] # Gets those packages that need to be installed cran_pkg_to_be_installed &lt;- setdiff(cran_pkg, cran_pkg_already_installed) bioc_pkg_to_be_installed &lt;- setdiff(bioc_pkg, bioc_pkg_already_installed) # If there are packages that need to be installed, installs them from CRAN if( length(cran_pkg_to_be_installed) ) { install.packages(cran_pkg_to_be_installed) } # If there are packages that need to be installed, installs them from Bioconductor if( length(bioc_pkg_to_be_installed) ) { BiocManager::install(bioc_pkg_to_be_installed, ask = F) } Now all required packages are installed, so let’s load them into the session. Some function names occur in multiple packages. That is why miaverse’s packages mia and miaViz are prioritized. Packages that are loaded first have higher priority. # Reorders bioc packages, so that mia and miaViz are first bioc_pkg &lt;- c(bioc_pkg[ bioc_pkg %in% c(&quot;mia&quot;, &quot;miaViz&quot;) ], bioc_pkg[ !bioc_pkg %in% c(&quot;mia&quot;, &quot;miaViz&quot;) ] ) # Loading all packages into session. Returns true if package was successfully loaded. sapply(c(bioc_pkg, cran_pkg), require, character.only = TRUE) ## mia miaViz ANCOMBC ape DESeq2 DirichletMultinomial ## TRUE TRUE TRUE TRUE TRUE TRUE ## BiocManager bookdown dplyr ecodist ggplot2 gridExtra ## TRUE TRUE TRUE TRUE TRUE TRUE ## knitr vegan ## TRUE TRUE # Setting path for saving figures generated throughout the notebook. knitr::opts_chunk$set(echo = FALSE, fig.path=&quot;Figures/&quot;) "],["importing-microbiome-data.html", "4 Importing microbiome data 4.1 Data access 4.2 Investigate the R data object 4.3 Further examples", " 4 Importing microbiome data This section demonstrates how to import microbiome profiling data in R. The biom format is a standard file format for microbiome data. Here, we import biom data files into a specific data container (structure) in R. Specifically, we use a TreeSummarizedExperiment (TSE) data container. This provides the basis for the miaverse data science framework. We use example data from the following publication: Tengeler AC et al. (2020) Gut microbiota from persons with attention-deficit/hyperactivity disorder affects the brain in mice. Microbiome 8:44. In this study, mice are colonized with microbiota from participants with ADHD (attention deficit hyperactivity disorder) and healthy participants. The aim of the study was to assess whether the mice display ADHD behaviors after being inoculated with ADHD microbiota, suggesting a role of the microbiome in ADHD pathology. 4.1 Data access Downloading the data You can download the data from data subfolder. The data set consists of 3 files: biom file: abundance table and taxonomy information csv file: sample metadata tree file: phylogenetic tree Store the data in your desired local directory (for instance, data/ under the working directory), and define source file paths Now we can load the (biom) data into a SummarizedExperiment (SE) object. 4.2 Investigate the R data object We have now imported the data set in R. Let us investigate its contents. ## class: SummarizedExperiment ## dim: 151 27 ## metadata(0): ## assays(1): counts ## rownames(151): 1726470 1726471 ... 17264756 17264757 ## rowData names(6): taxonomy1 taxonomy2 ... taxonomy5 taxonomy6 ## colnames(27): A110 A111 ... A38 A39 ## colData names(0): The assays slot includes a list of abundance tables. The imported abundance table is named as “counts”. Let us inspect only the first cols and rows. ## A110 A111 A12 ## 1726470 17722 11630 0 ## 1726471 12052 0 2679 ## 17264731 0 970 0 4.2.1 rowData (taxonomic information) The rowdata includes taxonomic information from the biom file. The head() command shows just the beginning of the data table for an overview. knitr::kable() is for printing the information more nicely. taxonomy1 taxonomy2 taxonomy3 taxonomy4 taxonomy5 taxonomy6 1726470 \"k__Bacteria p__Bacteroidetes c__Bacteroidia o__Bacteroidales f__Bacteroidaceae g__Bacteroides\" 1726471 \"k__Bacteria p__Bacteroidetes c__Bacteroidia o__Bacteroidales f__Bacteroidaceae g__Bacteroides\" 17264731 \"k__Bacteria p__Bacteroidetes c__Bacteroidia o__Bacteroidales f__Porphyromonadaceae g__Parabacteroides\" 17264726 \"k__Bacteria p__Bacteroidetes c__Bacteroidia o__Bacteroidales f__Bacteroidaceae g__Bacteroides\" 1726472 \"k__Bacteria p__Verrucomicrobia c__Verrucomicrobiae o__Verrucomicrobiales f__Verrucomicrobiaceae g__Akkermansia\" 17264724 \"k__Bacteria p__Bacteroidetes c__Bacteroidia o__Bacteroidales f__Bacteroidaceae g__Bacteroides\" These taxonomic rank names (column names) are not real rank names. Let’s replace them with real rank names. In addition to that, the taxa names include, e.g., ’\"k__’ before the name, so let’s make them cleaner by removing them. Kingdom Phylum Class Order Family Genus 1726470 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 1726471 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 17264731 Bacteria Bacteroidetes Bacteroidia Bacteroidales Porphyromonadaceae Parabacteroides 17264726 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 1726472 Bacteria Verrucomicrobia Verrucomicrobiae Verrucomicrobiales Verrucomicrobiaceae Akkermansia 17264724 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 4.2.2 colData (sample information) We notice that the imported biom file did not contain the sample meta data yet, so it includes an empty data frame. ## DataFrame with 6 rows and 0 columns Let us add a sample meta data file. Now colData includes the sample metadata. Use kable to print it more nicely. patient_status cohort patient_status_vs_cohort sample_name A110 ADHD Cohort_1 ADHD_Cohort_1 A110 A12 ADHD Cohort_1 ADHD_Cohort_1 A12 A15 ADHD Cohort_1 ADHD_Cohort_1 A15 A19 ADHD Cohort_1 ADHD_Cohort_1 A19 A21 ADHD Cohort_2 ADHD_Cohort_2 A21 A23 ADHD Cohort_2 ADHD_Cohort_2 A23 4.2.3 Phylogenetic tree information Now, let’s add a phylogenetic tree. The current data object, se, is a SummarizedExperiment object. This does not include a slot for adding a phylogenetic tree. In order to do this, we can convert the SE object to an extended TreeSummarizedExperiment object which also includes a rowTree slot. ## class: TreeSummarizedExperiment ## dim: 151 27 ## metadata(0): ## assays(1): counts ## rownames(151): 1726470 1726471 ... 17264756 17264757 ## rowData names(6): Kingdom Phylum ... Family Genus ## colnames(27): A110 A12 ... A35 A38 ## colData names(4): patient_status cohort patient_status_vs_cohort sample_name ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: NULL ## rowTree: NULL ## colLinks: NULL ## colTree: NULL Next, let us read the tree data file and add it to the R data object (tse). ## class: TreeSummarizedExperiment ## dim: 151 27 ## metadata(0): ## assays(1): counts ## rownames(151): 1726470 1726471 ... 17264756 17264757 ## rowData names(6): Kingdom Phylum ... Family Genus ## colnames(27): A110 A12 ... A35 A38 ## colData names(4): patient_status cohort patient_status_vs_cohort sample_name ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (151 rows) ## rowTree: 1 phylo tree(s) (151 leaves) ## colLinks: NULL ## colTree: NULL Now rowTree includes a phylogenetic tree: 4.3 Further examples See the online book for more examples on data exploration and manipulation. "],["microbiome-data-exploration.html", "5 Microbiome data exploration 5.1 Investigate 5.2 Manipulate 5.3 Visualize", " 5 Microbiome data exploration Now we have loaded the data set into R and confirmed that it has all the necessary components. Next, let us walk through some basic operations for data exploration. 5.1 Investigate Dimensionality tells us, how many taxa and samples the data contains. As we can see, there are 151 taxa and 27 samples. ## [1] 151 27 The rowData slot contains a taxonomic table. This includes taxonomic information for each of the 151 entries. With the head() command, we can print just the beginning of the table. The rowData seems to contain information from 6 different taxonomy classes. Kingdom Phylum Class Order Family Genus 1726470 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 1726471 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 17264731 Bacteria Bacteroidetes Bacteroidia Bacteroidales Porphyromonadaceae Parabacteroides 17264726 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides 1726472 Bacteria Verrucomicrobia Verrucomicrobiae Verrucomicrobiales Verrucomicrobiaceae Akkermansia 17264724 Bacteria Bacteroidetes Bacteroidia Bacteroidales Bacteroidaceae Bacteroides The colData slot contains sample metadata. It contains information for all 27 samples. However, here only the 6 first samples are shown as we use the head() command. There are 4 columns, that contain information, e.g., about patients’ status, and cohort. patient_status cohort patient_status_vs_cohort sample_name A110 ADHD Cohort_1 ADHD_Cohort_1 A110 A12 ADHD Cohort_1 ADHD_Cohort_1 A12 A15 ADHD Cohort_1 ADHD_Cohort_1 A15 A19 ADHD Cohort_1 ADHD_Cohort_1 A19 A21 ADHD Cohort_2 ADHD_Cohort_2 A21 A23 ADHD Cohort_2 ADHD_Cohort_2 A23 From here, we can draw summaries of the sample (column) data, for instance to see what is the patient status distribution. The command colData(tse)$patient_status fetches the data from the column, and table() creates a table that shows how many times each class is present, and sort() sorts the table to ascending order. There are 13 samples from patients having ADHD, and 14 control samples. ## ## ADHD Control ## 13 14 5.2 Manipulate 5.2.1 Transformations Microbial abundances are typically ‘compositional’ (relative) in the current microbiome profiling data sets. This is due to technical aspects of the data generation process (see e.g. Gloor et al., 2017). The next example calculates relative abundances as these are usually easier to interpret than plain counts. For some statistical models we need to transform the data into other formats as explained in above link (and as we will see later). A variety of standard transformations for microbiome data are available for TSE data objects through mia R package. 5.2.2 Aggregation Microbial species can be called at multiple taxonomic resolutions. We can easily agglomerate the data based on taxonomic ranks. Here, we agglomerate the data at Phylum level. ## [1] 5 27 Now there are 5 taxa and 27 samples, meaning that there are 5 different Phylum level taxonomic groups. Looking at the rowData after agglomeration shows all Firmicutes are combined together, and all lower rank information is lost. From the assay we can see that all abundances of taxa that belong to Firmicutes are summed up. Kingdom Phylum Class Order Family Genus Bacteroidetes Bacteria Bacteroidetes NA NA NA NA Verrucomicrobia Bacteria Verrucomicrobia NA NA NA NA Proteobacteria Bacteria Proteobacteria NA NA NA NA Firmicutes Bacteria Firmicutes NA NA NA NA Cyanobacteria Bacteria Cyanobacteria NA NA NA NA If you are sharp, you have by now noticed that all the aggregated values in the above example are NA’s (missing data). This is because the agglomeration is missing abundances for certain taxa, and in that case the sum is not defined by default (na.rm = FALSE). We can ignore the missing values in summing up the data by setting na.rm = TRUE; then the taxa that do not have information in specified level will be removed. Those taxa that do not have information in specified level are agglomerated at lowest possible level that is left after agglomeration. Kingdom Phylum Class Order Family Genus Family:Lachnospiraceae Bacteria Firmicutes Clostridia Clostridiales Lachnospiraceae Order:Bacteroidales Bacteria Bacteroidetes Bacteroidia Bacteroidales Order:Clostridiales Bacteria Firmicutes Clostridia Clostridiales Family:Enterobacteriaceae Bacteria Proteobacteria Gammaproteobacteria Enterobacteriales Enterobacteriaceae Order:Gastranaerophilales Bacteria Cyanobacteria Melainabacteria Gastranaerophilales Here agglomeration is done similarly, but na.rm = TRUE ## [1] &quot;Agglomeration with na.rm = FALSE: 54 taxa.&quot; ## [1] &quot;Agglomeration with na.rm = TRUE: 49 taxa.&quot; The mia package contains further examples on various data agglomeration and splitting options. 5.3 Visualize The miaViz package facilitates data visualization. Let us plot the Phylum level abundances. ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will replace the existing scale. Density plot shows the overall abundance distribution for a given taxonomic group. Let us check the relative abundance of Firmicutes across the sample collection. The density plot is a smoothened version of a standard histogram. The plot shows peak abundances around 30 %. For more visualization options and examples, see the miaViz vignette. "],["alpha-diversity.html", "6 Alpha diversity 6.1 Visualization 6.2 Statistical testing and comparisons 6.3 Further resources", " 6 Alpha diversity This section demonstrates how alpha diversity indices are calculated. Alpha diversity is a quantity that measures diversity of taxa in within the sample. Higher numbers of unique taxa, and more even abundance distributions within a sample yield larger values for alpha diversity. Alpha diversity is an important quantity in a microbiome research. The mia package provides access to a wide variety of alpha diversity indices. As an example, we show how to calculate Shannon and Faith diversity indices. Shannon index reflects how many different taxa there are and how evenly they are distributed within a sample. Faith index additionally takes into account the phylogenetic relations between the taxa when quantifying the overall community diversity. In both indices, higher values represent higher diversity. Shannon_index Faith_diversity_index A110 1.765407 7.39224 A12 2.716438 6.29378 A15 3.178103 6.60608 A19 2.891987 6.79708 A21 2.841979 6.65110 A23 2.797942 5.96246 Next we can visualize Shannon index with histogram. To see, if there is dependency between Shannon and Faith, we can do cross-plot i.e., scatter plot, where one index is on the x-axis and another on the y-axis. It seems that, there is a positive correlation between these two indices. ## `geom_smooth()` using formula &#39;y ~ x&#39; 6.1 Visualization Next let’s compare indices between different patient status and cohorts. Boxplot is suitable for that purpose. 6.2 Statistical testing and comparisons To further investigate if patient status explains the variation of Shannon index, let’s do a Wilcoxon test. The Wilcoxon test is similar to a Student’s t-test, however, the Student’s t-test is parametric. It means that the data must be normally distributed. The Wilcoxon test is non-parametric so it doesn’t make any assumptions about the distribution. The Wilcoxon test tests if there are statistical differences between two groups. Here it tests, if ADHD and control groups have different Shannon index values. As we can see, there is no difference between groups, because the p-value is over 0.05, which is often used as a standard cutoff point. ## ## Wilcoxon rank sum exact test ## ## data: Shannon_index by patient_status ## W = 76, p-value = 0.4879 ## alternative hypothesis: true location shift is not equal to 0 Another test that we can make is to test if ADHD samples differs between different cohorts. From boxplot that we made in previous step, we can see that there might be statistically significant difference between different cohorts. Let’s compare Shannon index of ADHD samples between cohort 2 and cohort 3. As we can see, there is statistically significant difference between the cohorts. ## ## Wilcoxon rank sum exact test ## ## data: Shannon_index by cohort ## W = 20, p-value = 0.01587 ## alternative hypothesis: true location shift is not equal to 0 6.3 Further resources For more examples, see a dedicated section on alpha diversity in the online book. "],["beta-diversity.html", "7 Beta diversity 7.1 Examples of PCoA with different settings 7.2 Highlighting external variables on PCoA plot 7.3 Estimating associations with an external variable 7.4 Further resources", " 7 Beta diversity In this section, we go through how to calculate and visualize beta diversity. Beta diversity reflects the difference in microbial composition between samples. Unlike alpha diversity, where we calculate diversity within a sample, any particular beta diversity value can only be calculated between two samples. There are different ways to measure the distance between two samples. Some of the common choices include Bray-Curtis, Unifrac, Jaccard index, and the Aitchison distance metric. Each of these (dis)similarity measures emphasizes different aspects of (dis)similarity. For example, UniFrac is a distance metric that incorporates phylogenetic information between samples. Or, the Jaccard-index measures the distance based on presence/absence of any taxon irrespective of its abundance. 7.1 Examples of PCoA with different settings After calculating beta diversity, we end up with a (dis)similarity matrix that contains for each sample the distance to any other sample. To explore our data, we would like to visualize the distances between samples and potentially map meta data into the same graph. This would enable us to explore whether distance between samples could be related to known variables. Given the many dimensions in the matrix, we first need to apply a technique that summarises most of the information into fewer dimensions (components). Principal Coordinate Analysis (PCoA) is a technique that can achieve exactly that. As a side note for those of you familiar with Principal Component Analysis (PCA): A PCoA where you enter a matrix of Euclidean distances will be similar to a PCA of the microbial abundances (except for potential scaling differences). Back to our PCoA: Typically, we retain 2-3 components that contain most of the information in the data. Note however, that the other components might contain important information as well. After all these steps, we thus end up with 2-3 new variables (components), where each sample has a score on each of those components. We can then simply create a 2-D or a 3D plot with the components on the x and y (and z) axis. We could do the same for any combination of the many components a PCoA calculates. Enough theory, let’s try to put this into practice! 7.1.1 PCoA for ASV-level data with Bray-Curtis We will illustrate what we described above using different distance measures and also applied to different taxonomic ranks. We start with a PCoA that uses a Bray Curtis matrix as input, calculated at the Genus level. 7.1.2 PCoA for ASV-level data with Aitchison distance Now the same using Aitchison distance. This metric corresponds to Euclidean distances between CLR transformed sample abundance vectors. 7.1.3 PCoA aggregated to Phylum level We use again the Aitchison distances in this example but this time applied to the phylum level. 7.2 Highlighting external variables on PCoA plot As explained in the introduction, it can help to explore the data if we map other variables on the same plot. For example, by changing the color of the points based on that variable. Let’s see how we could do that: 7.2.1 PCoA with discrete sample grouping variable shown with colors 7.2.2 PCoA plot with continuous variable We can do the same as above using any continuous variable. E.g. let us see how the plotted samples differ in their alpha diversity: 7.3 Estimating associations with an external variable Next to visualizing whether any variable is associated with differences between samples, we can also quantify the strength of the association between the variation in community composition (beta diversity) and external factors. The current standard way to do this is to perform a so-called permutational multivariate analysis of variance (PERMANOVA). This method takes as input the ASV/OTU table, which measure of distance you want to base the test on and a formula that tells the model how you think the variables are associated with each other. Let’s try it: ## [1] &quot;Different different cohorts and variance of abundance between samples, p-value: 0.7408&quot; As we see, the cohort variable is not significantly associated with microbiota composition (p-value is over 0.05). We can still visualize those taxa whose abundances are the most different between cohorts. This gives us information how taxonomic abundances tend to differ between different cohorts. In order to do that, we first need to extract the model coefficients of taxa: The above plot shows taxa as code names, and it is hard to tell which bacterial groups they represent. However, it is easy to add human readable names. We can fetch those from our rowData. Here we use Genus level names: 7.4 Further resources For more examples, see a dedicated section on beta diversity in the online book. "],["community-typing.html", "8 Community typing 8.1 Dirichlet-Multinomial Mixture Model 8.2 PCoA for ASV-level data with Bray-Curtis; with DMM clusters shown with colors", " 8 Community typing 8.1 Dirichlet-Multinomial Mixture Model This section focus on DMM analysis. One technique that allows to search for groups of samples that are similar to each other is the Dirichlet-Multinomial Mixture Model. In DMM, we first determine the number of clusters (k) that best fit the data (model evidence) using Laplace approximation. After fitting the model with k clusters, we obtain for each sample k probabilities that reflect the probability that a sample belongs to the given cluster. Let’s cluster the data with DMM clustering. ## class: TreeSummarizedExperiment ## dim: 151 27 ## metadata(1): DMN ## assays(3): counts relabundance clr ## rownames(151): 1726470 1726471 ... 17264756 17264757 ## rowData names(6): Kingdom Phylum ... Family Genus ## colnames(27): A110 A12 ... A35 A38 ## colData names(6): patient_status cohort ... Shannon_index Faith_diversity_index ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (151 rows) ## rowTree: 1 phylo tree(s) (151 leaves) ## colLinks: NULL ## colTree: NULL Return information on metadata that the object contains. ## [1] &quot;DMN&quot; This returns a list of DMN objects for a closer investigation. ## [[1]] ## class: DMN ## k: 1 ## samples x taxa: 27 x 151 ## Laplace: 12049.73 BIC: 12271.38 AIC: 12173.55 ## ## [[2]] ## class: DMN ## k: 2 ## samples x taxa: 27 x 151 ## Laplace: 11440.96 BIC: 12161.29 AIC: 11964.97 ## ## [[3]] ## class: DMN ## k: 3 ## samples x taxa: 27 x 151 ## Laplace: 11060.02 BIC: 12266.31 AIC: 11971.51 ## ## [[4]] ## class: DMN ## k: 4 ## samples x taxa: 27 x 151 ## Laplace: 11417.3 BIC: 13047.39 AIC: 12654.11 ## ## [[5]] ## class: DMN ## k: 5 ## samples x taxa: 27 x 151 ## Laplace: 11401.97 BIC: 13460.72 AIC: 12968.95 ## ## [[6]] ## class: DMN ## k: 6 ## samples x taxa: 27 x 151 ## Laplace: 11202.17 BIC: 13718.9 AIC: 13128.65 ## ## [[7]] ## class: DMN ## k: 7 ## samples x taxa: 27 x 151 ## Laplace: 11478.16 BIC: 14345.11 AIC: 13656.38 Show Laplace approximation (model evidence) for each model of the k models. Return the model that has the best fit. ## class: DMN ## k: 3 ## samples x taxa: 27 x 151 ## Laplace: 11060.02 BIC: 12266.31 AIC: 11971.51 8.2 PCoA for ASV-level data with Bray-Curtis; with DMM clusters shown with colors Group samples and return DMNGroup object that contains a summary. Patient status is used for grouping. ## class: DMNGroup ## summary: ## k samples taxa NLE LogDet Laplace BIC AIC ## ADHD 3 13 151 6018.131 -344.4241 5427.802 6601.657 6473.131 ## Control 3 14 151 6647.269 -148.0803 6155.112 7247.655 7102.269 Mixture weights (rough measure of the cluster size). ## pi theta ## 1 0.4814815 31.27780 ## 2 0.2962963 47.34473 ## 3 0.2222222 92.27382 Samples-cluster assignment probabilities / how probable it is that sample belongs to each cluster ## [,1] [,2] [,3] ## A110 1.000000e+00 1.264474e-144 7.542654e-205 ## A12 9.950681e-117 6.163945e-93 1.000000e+00 ## A15 1.000000e+00 9.655263e-119 3.396526e-234 ## A19 5.450412e-112 1.835766e-107 1.000000e+00 ## A21 2.174035e-93 4.774233e-96 1.000000e+00 ## A23 1.000000e+00 8.916806e-111 1.931535e-161 Contribution of each taxa to each component ## [,1] [,2] [,3] ## 1726470 6.35231134 2.898796316 20.1893420 ## 1726471 5.28797424 0.002048411 0.1532223 ## 17264731 0.00124954 9.144853437 2.0111994 ## 17264726 0.14048115 1.363495916 7.5894131 ## 1726472 2.10411256 3.523511489 2.6656623 ## 17264724 0.07236314 0.002048411 9.8546091 Get the assignment probabilities "],["differential-abundance-analysis.html", "9 Differential abundance analysis 9.1 Wilcoxon test 9.2 DESeq2 9.3 ANCOM-BC 9.4 Comparison of Wilcoxon test and DESeq2 9.5 Comparison of abundance", " 9 Differential abundance analysis Here, we analyse abundances with three different methods: Wilcoxon test, DESeq2, and ANCOM-BC. All of these test statistical differences between groups. We analyse Genus level abundances. 9.1 Wilcoxon test A Wilcoxon test estimates difference between two groups. It is a non-parametric alternative to a t-test, which means that the Wilcoxon test does not require normally distributed data. Let’s first collect the data for the testing purpose. Now we can do the Wilcoxon test. We test all the taxa by looping through columns, and store individual p-values to a vector. Then we create a data frame from collected data. Code below does the Wilcoxon test only for columns that contain abundances, not for column that contain patient status. Multiple tests were performed. These are not independent, so we need to adjust p-values for multiple testing. Otherwise, we would increase the chance of a type I error drastically depending on our p-value threshold. By applying a p-value adjustment, we can keep the false positive rate at a level that is acceptable. What is acceptable depends on our research goals. Here we use the fdr method, but there are several other methods as well. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 9.2 DESeq2 Our second analysis method is DESeq2. This performs the data normalization automatically. It also takes care of the p-value adjustment, so we don’t have to worry about that. DESeq2 uses negative binomial distribution to detect differences in read counts between groups. Its normalization takes care of the differences between library sizes and compositions. DESeq2 analysis includes multiple steps, but they are done automatically. More information can be found, e.g., from Harvard Chan Bioinformatic Core’s tutorial Introduction to DGE - ARCHIVED Now let us show how to do this. First, run the DESeq2 analysis. ## converting counts to integer mode ## Warning in DESeqDataSet(tse_genus, ~patient_status): 2 duplicate rownames were renamed by adding numbers ## Warning in DESeqDataSet(tse_genus, ~patient_status): some variables in design formula are characters, converting to factors ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing ## -- replacing outliers and refitting for 11 genes ## -- DESeq argument &#39;minReplicatesForReplace&#39; = 7 ## -- original counts are preserved in counts(dds) ## estimating dispersions ## fitting model and testing baseMean log2FoldChange lfcSE stat pvalue padj taxon Genus:Ruminococcaceae_UCG-014 22.548297 -24.891268 2.460684 -10.115589 0.0000000 0.0000000 Genus:Ruminococcaceae_UCG-014 Order:Bacteroidales 40.353733 -9.241798 2.136205 -4.326270 0.0000152 0.0002730 Order:Bacteroidales Genus:Faecalibacterium 231.079502 -7.074433 1.745612 -4.052694 0.0000506 0.0006835 Genus:Faecalibacterium Genus:Catabacter 18.045614 -6.615454 1.716150 -3.854823 0.0001158 0.0012508 Genus:Catabacter Genus:Butyricicoccus 2.392885 -5.179608 2.948055 -1.756957 0.0789251 0.3278426 Genus:Butyricicoccus Order:Gastranaerophilales 2.067972 -3.054975 2.938641 -1.039588 0.2985315 0.7269742 Order:Gastranaerophilales 9.3 ANCOM-BC The analysis of composition of microbiomes with bias correction (ANCOM-BC) is a recently developed method for differential abundance testing. It is based on an earlier published approach. This method could be recommended as part of several approaches: A recent study compared several mainstream methods and found that among another method, ANCOM-BC produced the most consistent results and is probably a conservative approach. Please note that based on this and other comparisons, no single method can be recommended across all datasets. Rather, it could be recommended to apply several methods and look at the overlap/differences. As the only method, ANCOM-BC incorporates the so called sampling fraction into the model. The latter term could be empirically estimated by the ratio of the library size to the microbial load. Variations in this sampling fraction would bias differential abundance analyses if ignored. Furthermore, this method provides p-values, and confidence intervals for each taxon. It also controls the FDR and it is computationally simple to implement. As we will see below, to obtain results, all that is needed is to pass a phyloseq object to the ancombc() function. Therefore, below we first convert our tse object to a phyloseq object. Then, we specify the formula. In this formula, other covariates could potentially be included to adjust for confounding. Please check the function documentation to learn about the additional arguments that we specify below. The object out contains all relevant information. Again, see the documentation of the function under Value for an explanation of all the output objects. Our question can be answered by looking at the res object, which now contains dataframes with the coefficients, standard errors, p-values and q-values. Conveniently, there is a dataframe diff_abn. Here, we can find all differentiallt abundant taxa. Below we show the first 6 entries of this dataframe: patient_statusControl 172647198 FALSE 1726478 FALSE 172647201 FALSE 17264798 FALSE 172647195 FALSE 1726472 FALSE In total, this method detects 13 differentially abundant taxa. 9.4 Comparison of Wilcoxon test and DESeq2 Let’s compare results that we got from the Wilcoxon test and DESeq2. As we can see from the scatter plot, DESeq2 gives lower p-values than Wilcoxon test. Prints number of p-values under 0.05 ## [1] &quot;DESeq2 p-values under 0.05: 7/54&quot; ## [1] &quot;Wilcoxon test p-values under 0.05: 2/54&quot; 9.5 Comparison of abundance In previous steps, we got information which taxa vary between ADHD and control groups. Let’s plot those taxa in the boxplot, and compare visually if abundances of those taxa differ in ADHD and control samples. For comparison, let’s plot also taxa that do not differ between ADHD and control groups. Let’s first gather data about taxa that have highest p-values. Next, let’s do the same but for taxa with lowest p-values. Then we can plot these six different taxa. Let’s arrange them into the same picture. "],["study-material.html", "10 Study material 10.1 Lecture slides 10.2 Example solutions 10.3 R programming resources 10.4 Resources for TreeSummarizedExperiment 10.5 Resources for phyloseq 10.6 Further reading", " 10 Study material 10.1 Lecture slides To be added. 10.2 Example solutions To be added. 10.3 R programming resources R programming basics: Base R Basics of R programming: Base R R cheat sheets R visualization with ggplot2 R graphics cookbook Rmarkdown Rmarkdown tips RStudio RStudio cheat sheet 10.4 Resources for TreeSummarizedExperiment SingleCellExperiment Publication Project page SummarizedExperiment Publication Project page TreeSummarizedExperiment Publication Project page 10.5 Resources for phyloseq List of R tools for microbiome analysis phyloseq microbiome tutorial microbiomeutilities 10.6 Further reading Data Analysis and Visualization in R for Ecologists by Data Carpentry Modern Statistics for Modern Biology. Holmes &amp; Huber (2018) for background in statistical analysis Microbiome Data Science. Shetty &amp; Lahti, 2019 "],["miscellaneous-material.html", "11 Miscellaneous material 11.1 Shapiro-Wilk test 11.2 Deseq details", " 11 Miscellaneous material 11.1 Shapiro-Wilk test If necessary, it is possible to assess normality of the data with Shapiro-Wilk test. ## [1] &quot;P-values over 0.05: 7/54&quot; 11.2 Deseq details Raw counts are normalized by log-based scaling. Taxa-wise variance is estimated. These values tell how much each taxa varies between samples. A curve is fitted over all those taxa-wise variance estimates that we got in the last step. This model tells how big the variance is in a specific abundance level. The model is used to shrink those individual variance estimates to avoid the effect of, e.g., small sample size and higher variance. This reduces the likelihood to get false positives. Variance estimates are used to compare different groups. We receive a result that shows whether the variance is explained by groups. "]]
